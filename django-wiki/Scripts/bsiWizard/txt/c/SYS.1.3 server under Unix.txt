[toc]
 
1 description
--------------

### 1.1 Introduction

Server systems often use the Linux or Unix operating systems. Examples of classic Unix systems are the BSD series (FreeBSD, OpenBSD and NetBSD), Solaris and AIX. Linux is not a classic Unix (the kernel is not based on the original source code from which the various Unix derivatives have developed), but a functional Unix system. This module considers all operating systems of the Unix family, including Linux as a functional Unix system.

Linux is free software and is developed by the open source community. In addition, there are providers who combine the various software components into a distribution and maintain, as well as offer other services. For Linux servers are often the distributions

* Debian
* Red Hat Enterprise Linux
* SUSE Linux Enterprise Server
* Ubuntu server
used. In addition, there are custom Linux distributions for specific applications and devices, such as Endian for firewall systems, OpenMediaVault for NAS systems, or OpenWRT for routers.

The services offered on a server are often central and therefore exposed to a special degree. As a result, Unix servers are not only critical for business processes, but are often the focus of attackers. Therefore, the availability and security of Unix servers is of particular importance.

### 1.2 Objective

The goal of the module is to protect information processed by Unix servers. The requirements of the block primarily address Linux servers, but can generally be adapted for Unix servers. Requirements are formulated on how the operating system should be configured and operated.

### 1.3 Delimitation

The module contains basic requirements for setting up and operating Unix servers. It concretizes and complements the aspects that are dealt with in the module SYS.1.1 General Server to specifics of Unix systems.

If the server is not to be managed by itself, but is hosted by third parties, the requirements of the module OPS.3.1 Outsourcing Usage must additionally be taken into account. Security requirements of possible server functions such as web server (APP.3.2 web server) or server for groupware (see APP.5.1 groupware) are the subject of our own building blocks, with the exception of the Unix-specific server services NIS, NFS and SSH, which are also included in this module be treated. The topic of virtualization is illuminated in the module SYS.1.5 Server Virtualization. This module is about the basic protection at the operating system level with on-board resources, regardless of the intended use of the server.

2 risk situation
-----------------

The following specific threats and vulnerabilities are of particular importance in the * * server under Unix area:

### 2 1 Spying on system and user information

Through various Unix programs it is possible to query data that the IT system stores about the users. This also affects data that can provide information about the performance profile of a user. This information includes information about additional logged-in users as well as technical information about operating system installation and configuration.

For example, with a simple program that evaluates the information provided by the "who" command at a particular time interval, each user can create an accurate usage profile for an account. For example, this can be used to determine the absence time of the system administrator or administrators in order to use these times for unauthorized actions. It is also possible to determine which terminals are allowed for privileged access. Other programs with similar abuses are "finger" or "ruser".

### 2 2 Exploitation of the script environment
In Unix operating systems, the use of scripting languages ​​is widespread. Scripts are a collection of individual commands that are stored and called up in a text file. The rich functionality of the scripting environment allows attackers to leverage scripts for their own purposes. In addition, the containment of activated scripting languages ​​is very difficult.

### 2 3 Dynamic loading of shared libraries

The command line option "LD \ _PRELOAD" loads the given library before any other libraries needed in an application and its functions are used by the application. An attacker could manipulate the operating system to carry out malicious use of certain applications.
