"""
Django settings for bsiwiki project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from django.core.urlresolvers import reverse_lazy

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
with open('/etc/secret_key.txt') as f:
    SECRET_KEY = f.read().strip()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'it-gs.ziik.tu-berlin.de']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',
    'django_nyt',
    'mptt',
    'sekizai',
    'sorl.thumbnail',
    'wiki',
    'wiki.plugins.attachments',
    'wiki.plugins.notifications',
    'wiki.plugins.images',
    'wiki.plugins.macros',
    'wiki.plugins.links',
    'bsi',
    'archive',
    'treeview',
    'control_panel',
    'formtools',
    'wizard',
    'BSIUpdate',
    'infopage',
    'widget_tweaks',
    #'djangosecure',
    #'sslserver',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
APPEND_SLASH = False
ROOT_URLCONF = 'bsiwiki.urls'

#We need because that banned users are inactive and without that the authenticate method returns None instead of the user
AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.AllowAllUsersModelBackend']

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.request',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
                'sekizai.context_processors.sekizai',

            ],
        },
    },
]

SITE_ID = 1

WIKI_ACCOUNT_HANDLING = True
WIKI_ACCOUNT_SIGNUP_ALLOWED = True

#LOGIN_REDIRECT_URL = reverse_lazy('wiki:get', kwargs={'path': ''})
LOGIN_REDIRECT_URL = 'index'

WSGI_APPLICATION = 'bsiwiki.wsgi.application'

LOGIN_URL = 'login'
# from bsiwiki.WikiPattern import WikiPattern
# URL_CONFIG_CLASS = WikiPattern

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

with open('/etc/db_django.txt') as f:
    DATABASES = {
        'default': {
            'ENGINE':'django.db.backends.postgresql_psycopg2',
            'NAME': f.readline().strip(),
            'USER': f.readline().strip(),
            'PASSWORD': f.readline().strip(),
            'HOST': f.readline().strip(),
            'PORT': f.readline().strip(),
        }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Redirect to home URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = '/'

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

#Options for secure requests and responses (HTTPS)

SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 3600

X_FRAME_OPTIONS = 'DENY'

#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

with open('/etc/email_django.txt') as f:
    EMAIL_HOST = f.readline().strip()
    EMAIL_HOST_USER = f.readline().strip()
    EMAIL_HOST_PASSWORD = f.readline().strip()

EMAIL_PORT = 587
EMAIL_USE_TLS = True
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

### PATHS ###
SCRIPT_DIR = os.path.join(BASE_DIR, 'Scripts')
CRAWLER_DIR = os.path.join(SCRIPT_DIR, 'bsiCrawler')
TREEVIEW_DIR = os.path.join(CRAWLER_DIR, 'treeview')
TOPICGENERATION_DIR = os.path.join(SCRIPT_DIR,'bsiWizard')

# english version of bsi
BSI_EN = os.path.join(CRAWLER_DIR, 'mdEn')
# original version of bsi
BSI_DE = os.path.join(CRAWLER_DIR, 'md')
# references folder needed by the importer
REFERENCE_DIR = os.path.join(CRAWLER_DIR, 'references')

# for update: temp folder for bsi english version
TEMP_BSI_EN = os.path.join(CRAWLER_DIR, 'temp_en')
TEMP_BSI_DE = os.path.join(CRAWLER_DIR, 'temp_de')
# path to CRF folder
CRF_DIR = os.path.join(SCRIPT_DIR, 'CRF')
# path to extracted CR data
CR_TXT_DIR = os.path.join(SCRIPT_DIR, 'Cross_Reference_Files')
# path to csv CR gotten from BSI website
CR_CSV_DOWNLOAD_DIR = os.path.join(SCRIPT_DIR, 'Cross_Reference_Tables')
CR_CSV_DIR = os.path.join(CR_CSV_DOWNLOAD_DIR, 'csv')

COMPARATOR_DIR = os.path.join(SCRIPT_DIR, 'bsiComparator')
COMPARATOR_OUTPUT = os.path.join(COMPARATOR_DIR, 'changelog.txt')
COMPARATOR_CONFIG = os.path.join(COMPARATOR_DIR, 'config.cfg')

### treeview ###
# path to json file containing bsi tree generated from crawler
BSI_TREE = os.path.join(TREEVIEW_DIR, 'bsiTree.txt')
# path to json file containing bsi tree with links from database
BSI_TREE_LINKS = os.path.join(TREEVIEW_DIR, 'bsiTreeLinks.txt')
# path to json file containing bsi tree with links, but in flat-hierarchy
# this is needed for the wizard
PATH_LIST = os.path.join(TREEVIEW_DIR, 'pathlist.txt')

### wizard stuff ###
WIZARD_DIR = os.path.join(SCRIPT_DIR, 'bsiWizard')
COMP_CSV = os.path.join(WIZARD_DIR, 'csv/componentsTopics.csv')
THREAT_CSV = os.path.join(WIZARD_DIR, 'csv/threadsTopics.csv')
